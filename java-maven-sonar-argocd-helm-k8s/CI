pipeline {
    agent {
        docker {
            image 'abhishekf5/maven-abhishek-docker-agent:v1'
            args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
        }
    }
    
    parameters {
        string(name: 'BRANCH', defaultValue: 'main', description: 'Branch to build')
        string(name: 'SONAR_URL', defaultValue: 'http://34.201.116.83:9000', description: 'SonarQube URL')
        string(name: 'DOCKER_IMAGE', defaultValue: 'abhishekf5/ultimate-cicd', description: 'Docker image name')
        string(name: 'GIT_USER_NAME', defaultValue: 'iam-veeramalla', description: 'GitHub Username')
        string(name: 'GIT_REPO_NAME', defaultValue: 'Jenkins-Zero-To-Hero', description: 'GitHub Repository Name')
    }

    stages {
        stage('Checkout') {
            steps {
                sh 'echo passed'
                // git branch: "${params.BRANCH}", url: "https://github.com/${params.GIT_USER_NAME}/${params.GIT_REPO_NAME}.git"
            }
        }
        stage('Build and Test') {
            steps {
                sh 'ls -ltr'
                // build the project and create a JAR file
                sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
            }
        }
        stage('Static Code Analysis') {
            steps {
                withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
                    sh """
                    cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && \
                    mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${params.SONAR_URL}
                    """
                }
            }
        }
        stage('SonarQube Quality Gate') {
            steps {
                script {
                    timeout(time: 1, unit: 'HOURS') {
                        def qg = waitForQualityGate()
                        if (qg.status != 'OK') {
                            error "Pipeline aborted due to quality gate failure: ${qg.status}"
                        }
                    }
                }
            }
        }
        stage('Build Docker Image') {
            environment {
                DOCKER_IMAGE_WITH_TAG = "${params.DOCKER_IMAGE}:${BUILD_NUMBER}"
                REGISTRY_CREDENTIALS = credentials('docker-cred')
            }
            steps {
                script {
                    sh """
                    cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && \
                    docker build -t ${DOCKER_IMAGE_WITH_TAG} .
                    """
                }
            }
        }
        stage('Trivy Scan') {
            steps {
                script {
                    sh """
                    trivy image ${DOCKER_IMAGE_WITH_TAG} || {
                      echo "Vulnerabilities found!" && exit 1;
                    }
                    """
                }
            }
        }
        stage('Push Docker Image') {
            when {
                expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' }
            }
            steps {
                script {
                    def dockerImage = docker.image(DOCKER_IMAGE_WITH_TAG)
                    docker.withRegistry('https://index.docker.io/v1/', 'docker-cred') {
                        dockerImage.push()
                    }
                }
            }
        }
    }
    post {
        success {
            script {
                // Post-deployment steps
                sh 'echo "Post-build steps..."'
                
                // Notifications
                slackSend(channel: '#deployments', message: "CI build succeeded for build ${BUILD_NUMBER}")
            }
        }
        failure {
            script {
                // Notifications
                slackSend(channel: '#deployments', message: "CI build failed for build ${BUILD_NUMBER}")
            }
        }
        always {
            cleanWs()
        }
    }
}
